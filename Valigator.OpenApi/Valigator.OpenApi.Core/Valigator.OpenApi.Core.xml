<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Valigator.OpenApi.Core</name>
    </assembly>
    <members>
        <member name="T:Valigator.OpenApi.Core.Discriminators.DiscriminatorMapping">
            <summary>
            Discriminator mapping definition.
            </summary>
            <param name="PropertyName">The name of the property that is used to distinguish between the discriminated objects.</param>
            <param name="Mappings">The enum value to type that defines the descriminator.</param>
        </member>
        <member name="M:Valigator.OpenApi.Core.Discriminators.DiscriminatorMapping.#ctor(System.String,System.ValueTuple{System.Enum,System.Type}[])">
            <summary>
            Discriminator mapping definition.
            </summary>
            <param name="PropertyName">The name of the property that is used to distinguish between the discriminated objects.</param>
            <param name="Mappings">The enum value to type that defines the descriminator.</param>
        </member>
        <member name="T:Valigator.OpenApi.Core.Discriminators.DiscriminatorMappings">
            <summary>
            Mulitple Discriminator Mappings.
            </summary>
        </member>
        <member name="T:Valigator.OpenApi.Core.Exceptions.InvalidTypeException">
            <summary>
            An invalid type was used. Message contains the reason why the type was invalid.
            </summary>
        </member>
        <member name="P:Valigator.OpenApi.Core.Exceptions.InvalidTypeException.InvalidType">
            <summary>
            The type that was invalid.
            </summary>
        </member>
        <member name="T:Valigator.OpenApi.Core.Exceptions.MissingDefaultConstructorException">
            <summary>
            The type provided does not have a default constructor (constructor with no parameters) defined.
            </summary>
        </member>
        <member name="M:Valigator.OpenApi.Core.Exceptions.MissingDefaultConstructorException.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="instanceType">The type that is missing a default constructor.</param>
        </member>
        <member name="P:Valigator.OpenApi.Core.Exceptions.MissingDefaultConstructorException.InstanceType">
            <summary>
            The type that is missing a default constructor.
            </summary>
        </member>
        <member name="M:Valigator.OpenApi.Core.Extensions.TypeExtensions.IsValigatorData(System.Type)">
            <summary>
            Determine if a particular property is a Valigator Data object
            </summary>
        </member>
        <member name="M:Valigator.OpenApi.Core.Extensions.TypeExtensions.IsComplexObject(System.Type)">
            <summary>
            Determine if the object is "complex" (ie: not primitive). This will result in a $ref in the OpenApi's generated JSON.
            </summary>
        </member>
        <member name="P:Valigator.OpenApi.Core.TypeMapping.CustomPrimitiveTypeMapper.MappedType">
            <summary>
            Gets the mapped type.
            </summary>
        </member>
        <member name="F:Valigator.OpenApi.Core.TypeMapping.CustomPrimitiveTypeMapper._schemaModifyer">
            <summary>
            The action that will modify the schema
            </summary>
        </member>
        <member name="P:Valigator.OpenApi.Core.TypeMapping.CustomPrimitiveTypeMapper.UseReference">
            <summary>Gets a value indicating whether to use a JSON Schema reference for the type.</summary>
        </member>
        <member name="M:Valigator.OpenApi.Core.TypeMapping.CustomPrimitiveTypeMapper.GenerateSchema(NJsonSchema.JsonSchema,NJsonSchema.Generation.TypeMappers.TypeMapperContext)">
            <summary>
            Gets the schema for the mapped type.
            </summary>
            <param name="schema">The schema.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Valigator.OpenApi.Core.ValigatorUnwrapping.ValigatorSchemaGenerator.GenerateObject(NJsonSchema.JsonSchema,NJsonSchema.Generation.JsonTypeDescription,NJsonSchema.Generation.JsonSchemaResolver)">
            <summary>Generates the properties for the given type and schema.</summary>
            <param name="schema">The properties</param>
            <param name="typeDescription">The type description.</param>
            <param name="schemaResolver">The schema resolver.</param>
            <returns>The task.</returns>
        </member>
        <member name="T:Valigator.OpenApi.Core.ValigatorUnwrapping.ValigatorUnwrappingReflectionService">
            <summary>
            Custom reflection service that turns types into their most basic forms.
            </summary>
        </member>
    </members>
</doc>
